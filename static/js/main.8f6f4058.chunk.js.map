{"version":3,"sources":["components/Map.js","components/BubbleChart/BubbleChartOptions.js","components/BubbleChart/index.js","components/Page.js","serviceWorker.js","index.js"],"names":["Map","state","active","config","mapHandler","event","stateName","target","dataset","name","_this","Object","defineProperty","fill","setState","componentDidUpdate","e","oldProps","props","handleStateChange","react_default","a","createElement","className","react_usa_map_default","customize","this","onClick","width","Component","BubbleChartOptions","chart","type","plotBorderWidth","zoomType","legend","enabled","credits","title","text","subtitle","xAxis","gridLineWidth","labels","format","plotLines","color","dashStyle","value","label","rotation","y","style","fontStyle","zIndex","yAxis","startOnTick","endOnTick","maxPadding","tooltip","useHTML","headerFormat","pointFormat","footerFormat","followPointer","plotOptions","series","dataLabels","Highcharts","setOptions","lang","thousandsSep","HighchartsMore","BUBBLE_COLORS","moving","house","medical","vacation","debt_consolidation","credit_card","small_business","major_purchase","home_improvement","car","BubbleChart","charts","data","loanData","map","row","x","avg_income","avg_loan","z","count","purpose","humanizeString","setData","setTitle","concat","stateAbbr","highcharts_react_min_default","highcharts","options","API_URL","Page","stateData","changeState","self","assertThisInitialized","fetch","then","response","json","componentDidMount","src_components_Map","components_BubbleChart","Boolean","window","location","hostname","match","ReactDOM","render","src_components_Page","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f6f4058.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Map.css';\nimport USAMap from \"react-usa-map\";\n\n\nclass Map extends Component {\n  state = {\n    active: null\n  };\n  config = {};\n  mapHandler = (event) => {\n    const stateName = event.target.dataset.name;\n    this.config = {[stateName] : {fill: 'blue'}};\n    this.setState({active: stateName})\n  };\n\n  componentDidUpdate = (e, oldProps) => {\n    if(oldProps.active !== this.state.active){\n      this.props.handleStateChange(this.state.active)\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Map\">\n        <USAMap\n          customize={this.config}\n          onClick={this.mapHandler}\n          width={this.props.width}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","const BubbleChartOptions = {\n  chart: {\n    type: 'bubble',\n    plotBorderWidth: 1,\n    zoomType: 'xy'\n  },\n  legend: {\n    enabled: false\n  },\n  credits: {\n    enabled: false\n  },\n  title: {\n    text: 'Loan details per state'\n  },\n\n  subtitle: {\n    text: 'Source: <a href=\"https://www.lendingclub.com/info/download-data.action/\">Lending Club</a>'\n  },\n\n  xAxis: {\n    gridLineWidth: 1,\n    title: {\n      text: 'Income'\n    },\n    labels: {\n      format: '{value}'\n    },\n    plotLines: [{\n      color: 'black',\n      dashStyle: 'dot',\n      width: 2,\n      value: 65,\n      label: {\n        rotation: 0,\n        y: 15,\n        style: {\n          fontStyle: 'italic'\n        },\n        text: 'Safe fat intake 65g/day'\n      },\n      zIndex: 3\n    }]\n  },\n\n  yAxis: {\n    startOnTick: false,\n    endOnTick: false,\n    title: {\n      text: 'Loan Amount'\n    },\n    labels: {\n      format: '{value}'\n    },\n    maxPadding: 0.2,\n  },\n\n  tooltip: {\n    useHTML: true,\n    headerFormat: '<p>',\n    pointFormat: '<b>{point.z} loans</b>',\n    footerFormat: '</table>',\n    followPointer: true\n  },\n\n  plotOptions: {\n    series: {\n      dataLabels: {\n        enabled: true,\n        format: '{point.name}'\n      }\n    }\n  },\n\n  series: [{}]\n\n};\n\nexport default BubbleChartOptions","import React, { Component } from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsMore from 'highcharts-more'\nimport HighchartsReact from 'highcharts-react-official'\nimport BubbleChartOptions from './BubbleChartOptions'\nimport humanizeString from 'humanize-string'\n\n\nHighcharts.setOptions({\n  lang: {\n    thousandsSep: ','\n  }\n});\nHighchartsMore(Highcharts);\n\nconst BUBBLE_COLORS = {\n  moving: \"#7cb5ec\",\n  house: \"#434348\",\n  medical: \"#90ed7d\",\n  vacation: \"#f7a35c\",\n  debt_consolidation: \"#8085e9\",\n  credit_card: \"#f15c80\",\n  small_business: \"#e4d354\",\n  major_purchase: \"#2b908f\",\n  home_improvement: \"#f45b5b\",\n  car: \"#91e8e1\"\n};\n\nclass BubbleChart extends Component {\n  componentDidUpdate() {\n    const chart = Highcharts.charts[0];\n    const series = chart.series[0];\n    const data = this.props.loanData.map( (row) => ({\n      x: row.avg_income,\n      y: row.avg_loan,\n      z: row.count,\n      color: BUBBLE_COLORS[row.purpose],\n      name: humanizeString(row.purpose)\n    }) );\n    series.setData(data);\n    chart.setTitle({text: `Loan details for ${this.props.stateAbbr}`});\n  }\n\n  render() {\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={BubbleChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BubbleChart;\n","import React, { Component } from 'react';\nimport './Page.css'; /* optional for styling like the :hover pseudo-class */\nimport Map from './Map';\nimport BubbleChart from './BubbleChart/index'\nconst API_URL = 'https://stormy-escarpment-35450.herokuapp.com'\nconst MAP_WIDTH = 500\n\nclass Page extends Component {\n  state = {\n    stateData: null\n  };\n  changeState = (state) => {\n    const self = this;\n    fetch(`${API_URL}/states/${state}`)\n      .then((response) => response.json())\n      .then((stateData) => self.setState({stateData: stateData, stateAbbr: state}));\n  };\n  componentDidMount = () => {\n    this.changeState('US')\n  }\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"column\">\n          <Map handleStateChange={this.changeState} width={MAP_WIDTH}></Map>\n        </div>\n        <div className=\"column\">\n          <BubbleChart loanData = {this.state.stateData} stateAbbr={this.state.stateAbbr}></BubbleChart>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Page;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all lending-club-client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './components/Page';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Page />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}